# For OCP 4.13 +
#
# Must run the following command to associate the security context
# with the user to be used
# oc adm policy add-scc-to-user builder-scc builder
#
---
apiVersion: project.openshift.io/v1
description: "InstantOn Liberty Demo"
displayName: demo
kind: ProjectRequest
metadata:
    name: demo
---
# IBM Operator Catalog
apiVersion: operators.coreos.com/v1alpha1
kind: CatalogSource
metadata:
  name: ibm-operator-catalog
  namespace: openshift-marketplace
spec:
  displayName: ibm-operator-catalog 
  publisher: IBM Content
  sourceType: grpc
  image: icr.io/cpopen/ibm-operator-catalog
  updateStrategy:
    registryPoll:
      interval: 45m
---
# install WAS Liberty Operator
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: was-liberty
  namespace: demo
spec:
  channel: v1.4
  installPlanApproval: Automatic
  name: ibm-websphere-liberty
  source: ibm-operator-catalog
  sourceNamespace: openshift-marketplace
---
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: liberty-operator-group
  namespace: demo
spec:
  targetNamespaces:
  - demo
---
# Add security context for building liberty images with CRIU
allowHostDirVolumePlugin: true
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: true
allowPrivilegedContainer: false
allowedCapabilities: null
apiVersion: security.openshift.io/v1
defaultAddCapabilities:
- CHECKPOINT_RESTORE
- SETPCAP
- SYS_PTRACE
fsGroup:
  type: MustRunAs
groups:
- system:authenticated
kind: SecurityContextConstraints
metadata:
  annotations:
    kubernetes.io/description: criu-scc is based on the restricted SCC but removes any restrictions
      that prevent the restore image from running successfully.
  generation: 1
  name: builder-scc
priority: null
readOnlyRootFilesystem: false
requiredDropCapabilities:
- ALL
runAsUser:
  type: MustRunAs
  uid: 1001
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: RunAsAny
users: []
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret
---
# Add a new role for builder and link it to the security context
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: builder
  namespace: demo
rules:
  - verbs:
      - use
    apiGroups:
      - security.openshift.io
    resources:
      - securitycontextconstraints
    resourceNames:
      - builder-scc
---
# Bind the role to the builder service account
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: builder
  namespace: demo
subjects:
  - kind: ServiceAccount
    name: builder
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: builder
---
# Store Liberty image locally
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  name: liberty
  namespace: demo
spec:
  lookupPolicy:
    local: false
  tags:
    - name: liberty
      annotations: null
      from:
        kind: DockerImage
        name: 'icr.io/appcafe/websphere-liberty:full-java17-openj9-ubi'
      generation: 1
      importPolicy: {}
      referencePolicy:
        type: Source
---
# ImageStream to hold the app locally in the OCP Repo
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  name: modresorts-app
  namespace: demo
spec:
  lookupPolicy:
    local: false
---
# BuildConfig modresoirt image
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: modresorts-build
  namespace: demo
  labels:
    app: modresorts-build
spec:
  source:
    type: Git
    git:
      uri: https://github.com/bpaskin/InstantOn-Liberty.git
  strategy:
    type: Docker                      
    dockerStrategy:
      dockerfilePath: Dockerfile
      from:
        kind: ImageStreamTag       
        namespace: demo
        name: liberty:liberty
  output:
    to:
      kind: ImageStreamTag
      name: modresorts-app:latest
  triggers:
     - type: ImageChange
---
# Deploy application 
apiVersion: liberty.websphere.ibm.com/v1
kind: WebSphereLibertyApplication
metadata:
   name: modresorts-app
   namespace: demo
spec:
   license:
      accept: true
      edition: IBM WebSphere Application Server
      productEntitlementSource: Standalone
   applicationImage: 'quay.io/bpaskin_us/modresorts:instanton
   expose: true
   manageTLS: true
   replicas: 1
   applicationName: modresorts
   pullPolicy: Always
   networkPolicy:
   disable: true
   securityContext:
    capabilities:
      add:
        - CHECKPOINT_RESTORE
        - SETPCAP
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: true
...
